From adcfa228c349358366d45d9876e64a0c6693db6c Mon Sep 17 00:00:00 2001
From: singhmandy85 <singh.mandy85@gmail.com>
Date: Sat, 6 Oct 2018 21:18:52 +0530
Subject: [PATCH 1/2] Initial commit

---
 .gitignore | 330 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 330 insertions(+)
 create mode 100644 .gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..3e759b7
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,330 @@
+## Ignore Visual Studio temporary files, build results, and
+## files generated by popular Visual Studio add-ons.
+##
+## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
+
+# User-specific files
+*.suo
+*.user
+*.userosscache
+*.sln.docstates
+
+# User-specific files (MonoDevelop/Xamarin Studio)
+*.userprefs
+
+# Build results
+[Dd]ebug/
+[Dd]ebugPublic/
+[Rr]elease/
+[Rr]eleases/
+x64/
+x86/
+bld/
+[Bb]in/
+[Oo]bj/
+[Ll]og/
+
+# Visual Studio 2015/2017 cache/options directory
+.vs/
+# Uncomment if you have tasks that create the project's static files in wwwroot
+#wwwroot/
+
+# Visual Studio 2017 auto generated files
+Generated\ Files/
+
+# MSTest test Results
+[Tt]est[Rr]esult*/
+[Bb]uild[Ll]og.*
+
+# NUNIT
+*.VisualState.xml
+TestResult.xml
+
+# Build Results of an ATL Project
+[Dd]ebugPS/
+[Rr]eleasePS/
+dlldata.c
+
+# Benchmark Results
+BenchmarkDotNet.Artifacts/
+
+# .NET Core
+project.lock.json
+project.fragment.lock.json
+artifacts/
+**/Properties/launchSettings.json
+
+# StyleCop
+StyleCopReport.xml
+
+# Files built by Visual Studio
+*_i.c
+*_p.c
+*_i.h
+*.ilk
+*.meta
+*.obj
+*.iobj
+*.pch
+*.pdb
+*.ipdb
+*.pgc
+*.pgd
+*.rsp
+*.sbr
+*.tlb
+*.tli
+*.tlh
+*.tmp
+*.tmp_proj
+*.log
+*.vspscc
+*.vssscc
+.builds
+*.pidb
+*.svclog
+*.scc
+
+# Chutzpah Test files
+_Chutzpah*
+
+# Visual C++ cache files
+ipch/
+*.aps
+*.ncb
+*.opendb
+*.opensdf
+*.sdf
+*.cachefile
+*.VC.db
+*.VC.VC.opendb
+
+# Visual Studio profiler
+*.psess
+*.vsp
+*.vspx
+*.sap
+
+# Visual Studio Trace Files
+*.e2e
+
+# TFS 2012 Local Workspace
+$tf/
+
+# Guidance Automation Toolkit
+*.gpState
+
+# ReSharper is a .NET coding add-in
+_ReSharper*/
+*.[Rr]e[Ss]harper
+*.DotSettings.user
+
+# JustCode is a .NET coding add-in
+.JustCode
+
+# TeamCity is a build add-in
+_TeamCity*
+
+# DotCover is a Code Coverage Tool
+*.dotCover
+
+# AxoCover is a Code Coverage Tool
+.axoCover/*
+!.axoCover/settings.json
+
+# Visual Studio code coverage results
+*.coverage
+*.coveragexml
+
+# NCrunch
+_NCrunch_*
+.*crunch*.local.xml
+nCrunchTemp_*
+
+# MightyMoose
+*.mm.*
+AutoTest.Net/
+
+# Web workbench (sass)
+.sass-cache/
+
+# Installshield output folder
+[Ee]xpress/
+
+# DocProject is a documentation generator add-in
+DocProject/buildhelp/
+DocProject/Help/*.HxT
+DocProject/Help/*.HxC
+DocProject/Help/*.hhc
+DocProject/Help/*.hhk
+DocProject/Help/*.hhp
+DocProject/Help/Html2
+DocProject/Help/html
+
+# Click-Once directory
+publish/
+
+# Publish Web Output
+*.[Pp]ublish.xml
+*.azurePubxml
+# Note: Comment the next line if you want to checkin your web deploy settings,
+# but database connection strings (with potential passwords) will be unencrypted
+*.pubxml
+*.publishproj
+
+# Microsoft Azure Web App publish settings. Comment the next line if you want to
+# checkin your Azure Web App publish settings, but sensitive information contained
+# in these scripts will be unencrypted
+PublishScripts/
+
+# NuGet Packages
+*.nupkg
+# The packages folder can be ignored because of Package Restore
+**/[Pp]ackages/*
+# except build/, which is used as an MSBuild target.
+!**/[Pp]ackages/build/
+# Uncomment if necessary however generally it will be regenerated when needed
+#!**/[Pp]ackages/repositories.config
+# NuGet v3's project.json files produces more ignorable files
+*.nuget.props
+*.nuget.targets
+
+# Microsoft Azure Build Output
+csx/
+*.build.csdef
+
+# Microsoft Azure Emulator
+ecf/
+rcf/
+
+# Windows Store app package directories and files
+AppPackages/
+BundleArtifacts/
+Package.StoreAssociation.xml
+_pkginfo.txt
+*.appx
+
+# Visual Studio cache files
+# files ending in .cache can be ignored
+*.[Cc]ache
+# but keep track of directories ending in .cache
+!*.[Cc]ache/
+
+# Others
+ClientBin/
+~$*
+*~
+*.dbmdl
+*.dbproj.schemaview
+*.jfm
+*.pfx
+*.publishsettings
+orleans.codegen.cs
+
+# Including strong name files can present a security risk 
+# (https://github.com/github/gitignore/pull/2483#issue-259490424)
+#*.snk
+
+# Since there are multiple workflows, uncomment next line to ignore bower_components
+# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
+#bower_components/
+
+# RIA/Silverlight projects
+Generated_Code/
+
+# Backup & report files from converting an old project file
+# to a newer Visual Studio version. Backup files are not needed,
+# because we have git ;-)
+_UpgradeReport_Files/
+Backup*/
+UpgradeLog*.XML
+UpgradeLog*.htm
+ServiceFabricBackup/
+*.rptproj.bak
+
+# SQL Server files
+*.mdf
+*.ldf
+*.ndf
+
+# Business Intelligence projects
+*.rdl.data
+*.bim.layout
+*.bim_*.settings
+*.rptproj.rsuser
+
+# Microsoft Fakes
+FakesAssemblies/
+
+# GhostDoc plugin setting file
+*.GhostDoc.xml
+
+# Node.js Tools for Visual Studio
+.ntvs_analysis.dat
+node_modules/
+
+# Visual Studio 6 build log
+*.plg
+
+# Visual Studio 6 workspace options file
+*.opt
+
+# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
+*.vbw
+
+# Visual Studio LightSwitch build output
+**/*.HTMLClient/GeneratedArtifacts
+**/*.DesktopClient/GeneratedArtifacts
+**/*.DesktopClient/ModelManifest.xml
+**/*.Server/GeneratedArtifacts
+**/*.Server/ModelManifest.xml
+_Pvt_Extensions
+
+# Paket dependency manager
+.paket/paket.exe
+paket-files/
+
+# FAKE - F# Make
+.fake/
+
+# JetBrains Rider
+.idea/
+*.sln.iml
+
+# CodeRush
+.cr/
+
+# Python Tools for Visual Studio (PTVS)
+__pycache__/
+*.pyc
+
+# Cake - Uncomment if you are using it
+# tools/**
+# !tools/packages.config
+
+# Tabs Studio
+*.tss
+
+# Telerik's JustMock configuration file
+*.jmconfig
+
+# BizTalk build output
+*.btp.cs
+*.btm.cs
+*.odx.cs
+*.xsd.cs
+
+# OpenCover UI analysis results
+OpenCover/
+
+# Azure Stream Analytics local run output 
+ASALocalRun/
+
+# MSBuild Binary and Structured Log
+*.binlog
+
+# NVidia Nsight GPU debugger configuration file
+*.nvuser
+
+# MFractors (Xamarin productivity tool) working folder 
+.mfractor/
-- 
2.18.0.windows.1


From ae7c7d8b93797a4fcdf0a4a17b90f7ab02879f7b Mon Sep 17 00:00:00 2001
From: Mandeep Singh <singh.mandy85@gmail.com>
Date: Sat, 6 Oct 2018 21:26:32 +0530
Subject: [PATCH 2/2] My submission

---
 Readme.txt                                    | 100 +++++++++++++
 XOProject.Tests/PortfolioControllerTests.cs   |  44 ++++++
 XOProject.Tests/QueryableExtensions.cs        | 139 ++++++++++++++++++
 XOProject.Tests/ShareControllerTests.cs       | 115 +++++++++++++++
 XOProject.Tests/TradeControllerTests.cs       |  86 +++++++++++
 XOProject.Tests/TradeRepositoryTests.cs       |  81 ++++++++++
 XOProject.Tests/XO-Project.Tests.csproj       |  24 +++
 XOProject.Tests/coverage.bat                  |  11 ++
 XOProject.sln                                 |  31 ++++
 XOProject/Controller/PortfolioController.cs   |  45 ++++++
 XOProject/Controller/ShareController.cs       |  72 +++++++++
 XOProject/Controller/TradeController.cs       |  60 ++++++++
 .../Exceptions/HttpStatusCodeException.cs     |  31 ++++
 .../HttpStatusCodeExceptionMiddleware.cs      |  43 ++++++
 ...StatusCodeExceptionMiddlewareExtensions.cs |  12 ++
 .../20181002102716_InitialCreate.Designer.cs  | 121 +++++++++++++++
 .../20181002102716_InitialCreate.cs           | 121 +++++++++++++++
 .../ExchangeContextModelSnapshot.cs           | 119 +++++++++++++++
 XOProject/Model/HourlyShareRate.cs            |  19 +++
 XOProject/Model/Portfolio.cs                  |  16 ++
 XOProject/Model/Trade.cs                      |  17 +++
 XOProject/Model/TradeAnalysis.cs              |  20 +++
 XOProject/Model/TradeModel.cs                 |  22 +++
 XOProject/Program.cs                          |  18 +++
 XOProject/Repository/ExchangeContext.cs       |  60 ++++++++
 XOProject/Repository/GenericRepository.cs     |  34 +++++
 XOProject/Repository/IGenericRepository.cs    |  16 ++
 XOProject/Repository/IPortfolioRepository.cs  |   9 ++
 XOProject/Repository/IShareRepository.cs      |   6 +
 XOProject/Repository/ITradeRepository.cs      |   6 +
 XOProject/Repository/PortfolioRepository.cs   |  18 +++
 XOProject/Repository/ShareRepository.cs       |  10 ++
 XOProject/Repository/TradeRepository.cs       |  10 ++
 XOProject/Startup.cs                          |  48 ++++++
 XOProject/XO-Project.csproj                   |  17 +++
 XOProject/appsettings.Development.json        |  10 ++
 XOProject/appsettings.json                    |  11 ++
 37 files changed, 1622 insertions(+)
 create mode 100644 Readme.txt
 create mode 100644 XOProject.Tests/PortfolioControllerTests.cs
 create mode 100644 XOProject.Tests/QueryableExtensions.cs
 create mode 100644 XOProject.Tests/ShareControllerTests.cs
 create mode 100644 XOProject.Tests/TradeControllerTests.cs
 create mode 100644 XOProject.Tests/TradeRepositoryTests.cs
 create mode 100644 XOProject.Tests/XO-Project.Tests.csproj
 create mode 100644 XOProject.Tests/coverage.bat
 create mode 100644 XOProject.sln
 create mode 100644 XOProject/Controller/PortfolioController.cs
 create mode 100644 XOProject/Controller/ShareController.cs
 create mode 100644 XOProject/Controller/TradeController.cs
 create mode 100644 XOProject/Exceptions/HttpStatusCodeException.cs
 create mode 100644 XOProject/Exceptions/HttpStatusCodeExceptionMiddleware.cs
 create mode 100644 XOProject/Exceptions/HttpStatusCodeExceptionMiddlewareExtensions.cs
 create mode 100644 XOProject/Migrations/20181002102716_InitialCreate.Designer.cs
 create mode 100644 XOProject/Migrations/20181002102716_InitialCreate.cs
 create mode 100644 XOProject/Migrations/ExchangeContextModelSnapshot.cs
 create mode 100644 XOProject/Model/HourlyShareRate.cs
 create mode 100644 XOProject/Model/Portfolio.cs
 create mode 100644 XOProject/Model/Trade.cs
 create mode 100644 XOProject/Model/TradeAnalysis.cs
 create mode 100644 XOProject/Model/TradeModel.cs
 create mode 100644 XOProject/Program.cs
 create mode 100644 XOProject/Repository/ExchangeContext.cs
 create mode 100644 XOProject/Repository/GenericRepository.cs
 create mode 100644 XOProject/Repository/IGenericRepository.cs
 create mode 100644 XOProject/Repository/IPortfolioRepository.cs
 create mode 100644 XOProject/Repository/IShareRepository.cs
 create mode 100644 XOProject/Repository/ITradeRepository.cs
 create mode 100644 XOProject/Repository/PortfolioRepository.cs
 create mode 100644 XOProject/Repository/ShareRepository.cs
 create mode 100644 XOProject/Repository/TradeRepository.cs
 create mode 100644 XOProject/Startup.cs
 create mode 100644 XOProject/XO-Project.csproj
 create mode 100644 XOProject/appsettings.Development.json
 create mode 100644 XOProject/appsettings.json

diff --git a/Readme.txt b/Readme.txt
new file mode 100644
index 0000000..2cd257a
--- /dev/null
+++ b/Readme.txt
@@ -0,0 +1,100 @@
+﻿
+Project Assessment:
+    Cross Exchange is an arbitrarily trading game developed by a startup in a very short span of time called “Super Traders”. 
+The purpose of the application is to educate users on the terminology used in the trading of shares.
+
+Notes:
+    
+- The project registers share and allows admins to update the price of the share on an hourly basis; 
+the share registered should have unique Symbol to identify it and should be all capital letters with 3 characters.
+ 
+The rate of the share should be exactly 2 decimal digits. 
+    
+
+- Also, the users should have a portfolio before they can start trading in the shares. 
+    - The frontend application is excluded from the current scope. It is a separate, fully-functional application handled by another team, and we do not want to modify it.
+
+
+
+Tasks:
+
+    
+1) For a given symbol of share, get the statistics for that particular share calculating the maximum, minimum, average and Sum of all the trades that happened for that share. 
+	
+Group statistics individually for all BUY trades and SELL trades separately. 
+
+    Your goal is to complete the above task. The API specifications are already there in the code as agreed with the frontend team. 
+
+    
+
+2) There are a few bugs in the application that we would like you to fix. Even though the project might not be in a great structure, please do not spend your valuable time on structural modifications - just focus on fixing the bugs.
+
+    
+
+3) Increase unit test coverage to reach code coverage up to 60%, achieving more than 60% will only consume your valuable time without any extra score.
+	
+	
+
+4) Implement best coding practises for the code provided. Review and fix the code such that there are no code smells, vulnerabilities and the code is inline with best coding guidelines for C#.
+	
+
+    
+
+PLEASE NOTE THAT ALL OF THE TASKS LISTED ABOVE ARE MANDATORY.
+
+    We will evaluate your submission on the following parameters:
+       
+
+- Implementation of the new feature
+        
+- Bug fixes
+        
+- Unit Tests
+		
+- Code quality
+
+    
+
+Prerequisites:
+         
+- GIT
+         
+- VS2017
+         
+- .NET Core 2.0
+         
+- SQL Server 2012+
+
+
+   
+
+Development Environment:
+        Cross Exchange application:
+        
+        - Modify the database connection string as per your instance and authentication.
+        - On any terminal move to the “XOProject” folder (the folder containing the “XO-Project.csproj" file) and execute these commands:
+
+        dotnet restore
+        dotnet build
+        dotnet ef database update
+
+        - Now you can call the API using any tool, like Postman, Curl, etc 
+        
+        - To check code coverage, execute the batch script:
+        coverage.bat
+
+   
+
+Production Environment:
+        This is how we are going to run and evaluate your submission, so please make sure to run below steps before submitting your answer.
+
+        1) Make sure to run unit tests, check code coverage, ensure the application is compiling and all dependencies are included.
+        
+  2) Commit everything to use.
+                (git add --all && git commit -m "My submission")
+        
+  3) Create patch file with the name without spaces 'XoProject_<YourNameHere>.patch', using the specified tag as the starting point.
+                (git format-patch   initial-commit --stdout > XoProject_<yournamehere>.patch)
+        
+  4) Store your file in a shared location where Crossover team can access and download it for evaluation. and add your sharable link in the answer field of this question.
+
diff --git a/XOProject.Tests/PortfolioControllerTests.cs b/XOProject.Tests/PortfolioControllerTests.cs
new file mode 100644
index 0000000..20763d5
--- /dev/null
+++ b/XOProject.Tests/PortfolioControllerTests.cs
@@ -0,0 +1,44 @@
+using System.Threading.Tasks;
+using XOProject.Controller;
+using Microsoft.AspNetCore.Mvc;
+using NUnit.Framework;
+using Moq;
+
+namespace XOProject.Tests
+{
+    public class PortfolioControllerTests
+    {
+        private readonly Mock<IShareRepository> _shareRepositoryMock = new Mock<IShareRepository>();
+        private readonly Mock<ITradeRepository> _tradeRepositoryMock = new Mock<ITradeRepository>();
+        private readonly Mock<IPortfolioRepository> _portfolioRepositoryMock = new Mock<IPortfolioRepository>();
+
+        private readonly PortfolioController _portfolioController;
+
+        public PortfolioControllerTests()
+        {
+            _portfolioController = new PortfolioController(_shareRepositoryMock.Object,
+                _tradeRepositoryMock.Object,
+                _portfolioRepositoryMock.Object);
+        }        
+
+        [Test]
+        public async Task Test_Post_Portfolio()
+        {
+            // Arrange
+            var portfolio = new Portfolio
+            {
+                Name = "Johny"
+            };
+
+            // Act
+            var result = await _portfolioController.Post(portfolio);
+
+            // Assert
+            Assert.NotNull(result);
+
+            var createdResult = result as CreatedResult;
+            Assert.NotNull(createdResult);
+            Assert.AreEqual(201, createdResult.StatusCode);
+        }
+    }
+}
diff --git a/XOProject.Tests/QueryableExtensions.cs b/XOProject.Tests/QueryableExtensions.cs
new file mode 100644
index 0000000..6e9763b
--- /dev/null
+++ b/XOProject.Tests/QueryableExtensions.cs
@@ -0,0 +1,139 @@
+using System.Collections.Generic;
+using System.Linq;
+using System.Linq.Expressions;
+using System.Threading;
+using System.Threading.Tasks;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Query.Internal;
+using Moq;
+
+namespace XOProject.Tests.Controller
+{
+    public static class QueryableExtensions
+    {
+        public static Mock<DbSet<T>> ToAsyncDbSetMock<T>(this IEnumerable<T> source)
+            where T : class
+        {
+            var data = source.AsQueryable();
+
+            var mockSet = new Mock<DbSet<T>>();
+
+            mockSet.As<IAsyncEnumerable<T>>()
+                .Setup(m => m.GetEnumerator())
+                .Returns(new TestAsyncEnumerator<T>(data.GetEnumerator()));
+
+            mockSet.As<IQueryable<T>>()
+                .Setup(m => m.Provider)
+                .Returns(new TestAsyncQueryProvider<T>(data.Provider));
+
+            mockSet.As<IQueryable<T>>().Setup(m => m.Expression).Returns(data.Expression);
+            mockSet.As<IQueryable<T>>().Setup(m => m.ElementType).Returns(data.ElementType);
+            mockSet.As<IQueryable<T>>().Setup(m => m.GetEnumerator()).Returns(() => data.GetEnumerator());
+
+            return mockSet;
+        }
+
+
+    }
+
+    public static class MockDbSetExtension
+    {
+        public static void SetSource<T>(this Mock<DbSet<T>> mockSet, IList<T> source) where T : class
+        {
+            var data = source.AsQueryable();
+            mockSet.As<IQueryable<T>>().Setup(m => m.Provider).Returns(data.Provider);
+            mockSet.As<IQueryable<T>>().Setup(m => m.Expression).Returns(data.Expression);
+            mockSet.As<IQueryable<T>>().Setup(m => m.ElementType).Returns(data.ElementType);
+            mockSet.As<IQueryable<T>>().Setup(m => m.GetEnumerator()).Returns(data.GetEnumerator());
+        }
+    }
+
+    internal class TestAsyncQueryProvider<TEntity> : IAsyncQueryProvider
+    {
+        private readonly IQueryProvider _inner;
+
+        internal TestAsyncQueryProvider(IQueryProvider inner)
+        {
+            _inner = inner;
+        }
+
+        public IQueryable CreateQuery(Expression expression)
+        {
+            return new TestAsyncEnumerable<TEntity>(expression);
+        }
+
+        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
+        {
+            return new TestAsyncEnumerable<TElement>(expression);
+        }
+
+        public object Execute(Expression expression)
+        {
+            return _inner.Execute(expression);
+        }
+
+        public TResult Execute<TResult>(Expression expression)
+        {
+            return _inner.Execute<TResult>(expression);
+        }
+
+        public IAsyncEnumerable<TResult> ExecuteAsync<TResult>(Expression expression)
+        {
+            return new TestAsyncEnumerable<TResult>(expression);
+        }
+
+        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
+        {
+            return Task.FromResult(Execute<TResult>(expression));
+        }
+    }
+
+    internal class TestAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
+    {
+        public TestAsyncEnumerable(IEnumerable<T> enumerable)
+            : base(enumerable)
+        { }
+
+        public TestAsyncEnumerable(Expression expression)
+            : base(expression)
+        { }
+
+        public IAsyncEnumerator<T> GetEnumerator()
+        {
+            return new TestAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
+        }
+
+        IQueryProvider IQueryable.Provider
+        {
+            get { return new TestAsyncQueryProvider<T>(this); }
+        }
+    }
+
+    internal class TestAsyncEnumerator<T> : IAsyncEnumerator<T>
+    {
+        private readonly IEnumerator<T> _inner;
+
+        public TestAsyncEnumerator(IEnumerator<T> inner)
+        {
+            _inner = inner;
+        }
+
+        public void Dispose()
+        {
+            _inner.Dispose();
+        }
+
+        public T Current
+        {
+            get
+            {
+                return _inner.Current;
+            }
+        }
+
+        public Task<bool> MoveNext(CancellationToken cancellationToken)
+        {
+            return Task.FromResult(_inner.MoveNext());
+        }
+    }
+}
diff --git a/XOProject.Tests/ShareControllerTests.cs b/XOProject.Tests/ShareControllerTests.cs
new file mode 100644
index 0000000..3f4e762
--- /dev/null
+++ b/XOProject.Tests/ShareControllerTests.cs
@@ -0,0 +1,115 @@
+using System;
+using System.Threading.Tasks;
+using XOProject.Controller;
+using Microsoft.AspNetCore.Mvc;
+using NUnit.Framework;
+using Moq;
+using FizzWare.NBuilder;
+using XOProject.Tests.Controller;
+using System.Collections.Generic;
+
+namespace XOProject.Tests
+{
+    public class ShareControllerTests
+    {
+        private readonly Mock<IShareRepository> _shareRepositoryMock = new Mock<IShareRepository>();
+
+        private readonly ShareController _shareController;
+
+        public ShareControllerTests()
+        {
+            _shareController = new ShareController(_shareRepositoryMock.Object);
+        }
+
+        [Test]
+        public async Task Post_ShouldInsertHourlySharePrice()
+        {
+            // Arrange
+            var hourRate = new HourlyShareRate
+            {
+                Symbol = "CBI",
+                Rate = 330.0M,
+                TimeStamp = new DateTime(2018, 08, 17, 5, 0, 0)
+            };
+
+            // Act
+            var result = await _shareController.Post(hourRate);
+
+            // Assert
+            Assert.NotNull(result);
+
+            var createdResult = result as CreatedResult;
+            Assert.NotNull(createdResult);
+            Assert.AreEqual(201, createdResult.StatusCode);
+        }
+
+        [Test]
+        public async Task Search_Returns_Shares_List()
+        {
+            // Arrange
+            var shareDbSetMock = Builder<HourlyShareRate>.CreateListOfSize(3)
+                .All()
+                .With(c => c.Rate = Faker.RandomNumber.Next(20, 100))
+                .With(c => c.Symbol = "REL")
+                .Build().ToAsyncDbSetMock();
+            _shareRepositoryMock.Setup(m => m.Query()).Returns(shareDbSetMock.Object);
+                         
+            // Act
+            var result = await _shareController.Get("REL");
+
+            // Assert
+            Assert.NotNull(result);
+
+            var objectResult = result as OkObjectResult;
+            Assert.NotNull(objectResult);
+
+            var content = objectResult.Value as List<HourlyShareRate>;
+            Assert.NotNull(content);
+
+            Assert.AreEqual(3, content.Count);
+        }
+
+        [Test]
+        public async Task Search_Returns_Shares_BySymbol()
+        {
+            // Arrange
+            var shareDbSetMock = Builder<HourlyShareRate>.CreateListOfSize(3)
+                .All()
+                .With(c => c.Rate = Faker.RandomNumber.Next(20, 100))
+                .With(c => c.Symbol = "REL")
+                .Build().ToAsyncDbSetMock();
+            _shareRepositoryMock.Setup(m => m.Query()).Returns(shareDbSetMock.Object);
+
+            // Act
+            var result = await _shareController.GetLatestPrice("REL");
+
+            // Assert
+            Assert.NotNull(result);
+
+            var objectResult = result as OkObjectResult;
+            Assert.NotNull(objectResult);
+
+            var content = Convert.ToDecimal(objectResult.Value);
+
+            Assert.NotNull(content);
+        }
+
+        [Test]
+        public async Task Put_ShouldUpdateLastPrice()
+        {
+            // Arrange
+            var shareDbSetMock = Builder<HourlyShareRate>.CreateListOfSize(3)
+                .All()
+                .With(c => c.Rate = Faker.RandomNumber.Next(20, 100))
+                .With(c => c.Symbol = "REL")
+                .Build().ToAsyncDbSetMock();
+            _shareRepositoryMock.Setup(m => m.Query()).Returns(shareDbSetMock.Object);
+
+            // Act
+            await _shareController.UpdateLastPrice("REL");
+
+            // Assert 
+        }
+
+    }
+}
diff --git a/XOProject.Tests/TradeControllerTests.cs b/XOProject.Tests/TradeControllerTests.cs
new file mode 100644
index 0000000..68248d6
--- /dev/null
+++ b/XOProject.Tests/TradeControllerTests.cs
@@ -0,0 +1,86 @@
+using System;
+using System.Threading.Tasks;
+using XOProject.Controller;
+using Microsoft.AspNetCore.Mvc;
+using NUnit.Framework;
+using Moq;
+using FizzWare.NBuilder;
+using XOProject.Tests.Controller;
+using System.Collections.Generic;
+
+namespace XOProject.Tests
+{
+    public class TradeControllerTests
+    {
+        private readonly Mock<IShareRepository> _shareRepositoryMock = new Mock<IShareRepository>();
+        private readonly Mock<ITradeRepository> _tradeRepositoryMock = new Mock<ITradeRepository>();
+        private readonly Mock<IPortfolioRepository> _portfolioRepository = new Mock<IPortfolioRepository>();
+
+        private readonly TradeController _tradeController;
+
+        public TradeControllerTests()
+        {
+            _tradeController = new TradeController(_shareRepositoryMock.Object,
+                _tradeRepositoryMock.Object,
+                _portfolioRepository.Object);
+        }        
+
+        [Test]
+        public async Task Test_GetAllTradings_List()
+        {
+            // Arrange
+            var tradeDbSetMock = Builder<Trade>.CreateListOfSize(3)
+                .All()
+                .With(c => c.NoOfShares = Faker.RandomNumber.Next(20, 100))
+                .With(c => c.Price = Faker.RandomNumber.Next(20, 100))
+                .With(c => c.PortfolioId = 1)
+                .With(c => c.Symbol = "REL")
+                .With(c => c.Action = "Buy")
+                .Build().ToAsyncDbSetMock();
+            _tradeRepositoryMock.Setup(m => m.Query()).Returns(tradeDbSetMock.Object);
+                         
+            // Act
+            var result = await _tradeController.GetAllTradings(1);
+
+            // Assert
+            Assert.NotNull(result);
+
+            var objectResult = result as OkObjectResult;
+            Assert.NotNull(objectResult);
+
+            var content = objectResult.Value as List<Trade>;
+            Assert.NotNull(content);
+
+            Assert.AreEqual(3, content.Count);
+        }
+
+        [Test]
+        public async Task Test_GetAnalysis_List()
+        {
+            // Arrange
+            var tradeDbSetMock = Builder<Trade>.CreateListOfSize(3)
+                .All()
+                .With(c => c.NoOfShares = Faker.RandomNumber.Next(20, 100))
+                .With(c => c.Price = Faker.RandomNumber.Next(20, 100))
+                .With(c => c.PortfolioId = 1)
+                .With(c => c.Symbol = "REL")
+                .With(c => c.Action = "Buy")
+                .Build().ToAsyncDbSetMock();
+            _tradeRepositoryMock.Setup(m => m.Query()).Returns(tradeDbSetMock.Object);
+
+            // Act
+            var result = await _tradeController.GetAnalysis("REL");
+
+            // Assert
+            Assert.NotNull(result);
+
+            var objectResult = result as OkObjectResult;
+            Assert.NotNull(objectResult);
+
+            var content = objectResult.Value as List<TradeAnalysis>;
+            Assert.NotNull(content);
+
+            Assert.AreEqual(1, content.Count);
+        }
+    }
+}
diff --git a/XOProject.Tests/TradeRepositoryTests.cs b/XOProject.Tests/TradeRepositoryTests.cs
new file mode 100644
index 0000000..f8d43c5
--- /dev/null
+++ b/XOProject.Tests/TradeRepositoryTests.cs
@@ -0,0 +1,81 @@
+using System;
+using NUnit.Framework;
+using Microsoft.EntityFrameworkCore;
+using System.Threading.Tasks;
+
+namespace XOProject.Tests
+{
+    public class TradeRepositoryTests
+    {
+        private ExchangeContext _testDBContext;
+        private readonly ITradeRepository _tradeRepository;
+
+        public TradeRepositoryTests()
+        {
+            _testDBContext = InMemoryContext();
+            _tradeRepository = new TradeRepository(_testDBContext);
+        }
+
+        private ExchangeContext InMemoryContext()
+        {
+            var options = new DbContextOptionsBuilder<ExchangeContext>()
+                .UseInMemoryDatabase(Guid.NewGuid().ToString())
+                .Options;
+
+            var context = new ExchangeContext(options);
+
+            return context;
+        }
+
+        [Test]
+        public async Task Test_Post_NewTrade()
+        {
+            //Arrange
+            var trade = new Trade
+            {
+                Symbol = "REL",
+                NoOfShares = 12,
+                Price = 98.76m,
+                PortfolioId = 1,
+                Action = "Buy"
+            };
+
+            //Act
+            await _tradeRepository.InsertAsync(trade);
+            var result = await _tradeRepository.Query().ToListAsync();
+
+            // Assert 
+            Assert.True(result.Count > 0);
+        }
+
+        [Test]
+        public async Task Test_Query_Trades()
+        {
+            //Arrange
+            var trade = new Trade
+            {
+                Symbol = "REL",
+                NoOfShares = 12,
+                Price = 98.76m,
+                PortfolioId = 1,
+                Action = "Buy"
+            };
+
+            //Act
+            _testDBContext.Add(trade);
+            await _testDBContext.SaveChangesAsync();
+            var result = await _tradeRepository.Query().ToListAsync();
+
+            // Assert 
+            Assert.True(result.Count > 0);
+        }
+
+        public void Dispose()
+        {
+            if (_testDBContext != null)
+            {
+                _testDBContext.Dispose();
+            }
+        }
+    }
+}
diff --git a/XOProject.Tests/XO-Project.Tests.csproj b/XOProject.Tests/XO-Project.Tests.csproj
new file mode 100644
index 0000000..3b9b0cb
--- /dev/null
+++ b/XOProject.Tests/XO-Project.Tests.csproj
@@ -0,0 +1,24 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+
+    <IsPackable>false</IsPackable>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Faker.Net" Version="1.0.3" />
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.6.0" />
+    <DotNetCliToolReference Include="MiniCover" Version="2.0.0-ci-20180304114938" />
+    <PackageReference Include="Moq" Version="4.9.0" />
+    <PackageReference Include="NBuilder" Version="6.0.0" />
+    <PackageReference Include="NUnit" Version="3.10.1" />
+    <PackageReference Include="NUnit3TestAdapter" Version="3.9.0" />
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.5.0" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\XOProject\XO-Project.csproj" />
+  </ItemGroup>
+
+</Project>
diff --git a/XOProject.Tests/coverage.bat b/XOProject.Tests/coverage.bat
new file mode 100644
index 0000000..70e4d4e
--- /dev/null
+++ b/XOProject.Tests/coverage.bat
@@ -0,0 +1,11 @@
+@echo off
+
+dotnet clean
+dotnet build /p:DebugType=Full
+dotnet minicover instrument --workdir ../ --assemblies XOProject.Tests/**/bin/**/*.dll --sources XOProject/**/*.cs --exclude-sources XOProject/Migrations/**/*.cs --exclude-sources XOProject/*.cs --exclude-sources XOProject\Repository\ExchangeContext.cs
+
+dotnet minicover reset --workdir ../
+
+dotnet test --no-build
+dotnet minicover uninstrument --workdir ../
+dotnet minicover report --workdir ../ --threshold 60
\ No newline at end of file
diff --git a/XOProject.sln b/XOProject.sln
new file mode 100644
index 0000000..6c85ef2
--- /dev/null
+++ b/XOProject.sln
@@ -0,0 +1,31 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio 15
+VisualStudioVersion = 15.0.27428.2037
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "XO-Project", "XOProject\XO-Project.csproj", "{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}"
+EndProject
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "XO-Project.Tests", "XOProject.Tests\XO-Project.Tests.csproj", "{133F2B3B-4D6C-4216-876D-707A76233D15}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}.Release|Any CPU.Build.0 = Release|Any CPU
+		{133F2B3B-4D6C-4216-876D-707A76233D15}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{133F2B3B-4D6C-4216-876D-707A76233D15}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{133F2B3B-4D6C-4216-876D-707A76233D15}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{133F2B3B-4D6C-4216-876D-707A76233D15}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {D955BA32-8AAA-4CEF-8F8E-0FC19C4D586E}
+	EndGlobalSection
+EndGlobal
diff --git a/XOProject/Controller/PortfolioController.cs b/XOProject/Controller/PortfolioController.cs
new file mode 100644
index 0000000..b2432b8
--- /dev/null
+++ b/XOProject/Controller/PortfolioController.cs
@@ -0,0 +1,45 @@
+﻿using System.ComponentModel.DataAnnotations;
+using System.Linq;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.EntityFrameworkCore;
+
+namespace XOProject.Controller
+{
+    [Route("api/[controller]")]
+    public class PortfolioController : ControllerBase
+    {
+        private IPortfolioRepository _portfolioRepository { get; set; }
+
+        public PortfolioController(IShareRepository shareRepository,
+            ITradeRepository tradeRepository,
+            IPortfolioRepository portfolioRepository)
+        {
+            _portfolioRepository = portfolioRepository;
+        }
+
+        [HttpGet("{portfolioId}")]
+        public async Task<IActionResult> GetPortfolioInfo([Required][FromRoute]int portfolioId)
+        {
+            var portfolios = await _portfolioRepository
+                                                .GetAll()
+                                                .Where(x => x.Id.Equals(portfolioId))
+                                                .ToListAsync();
+            
+            return Ok(portfolios);
+        }
+        
+        [HttpPost]
+        public async Task<IActionResult> Post([FromBody]Portfolio value)
+        {
+            if (!ModelState.IsValid)
+            {
+                return BadRequest(ModelState);
+            }
+
+            await _portfolioRepository.InsertAsync(value);
+
+            return Created($"Portfolio/{value.Id}", value);
+        }
+    }
+}
diff --git a/XOProject/Controller/ShareController.cs b/XOProject/Controller/ShareController.cs
new file mode 100644
index 0000000..2289993
--- /dev/null
+++ b/XOProject/Controller/ShareController.cs
@@ -0,0 +1,72 @@
+﻿using System;
+using System.ComponentModel.DataAnnotations;
+using System.Linq;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.EntityFrameworkCore;
+
+namespace XOProject.Controller
+{
+    [Route("api/[controller]")]
+    public class ShareController : ControllerBase
+    {
+        public IShareRepository _shareRepository { get; set; }
+
+        public ShareController(IShareRepository shareRepository)
+        {
+            _shareRepository = shareRepository;
+        }
+
+        [HttpPut("{symbol}")]
+        public async Task<IActionResult> UpdateLastPrice([Required][FromRoute]string symbol)
+        {
+            var share = await _shareRepository.Query()
+                                            .Where(x => x.Symbol.Equals(symbol))
+                                            .OrderByDescending(x => x.Rate)
+                                            .FirstOrDefaultAsync();
+
+            share.Rate =+ 10;
+            await _shareRepository.UpdateAsync(share);
+            return Ok();
+        }
+        
+        [HttpGet("{symbol}")]
+        public async Task<IActionResult> Get([Required][FromRoute]string symbol)
+        {
+            var shares = await _shareRepository.Query()
+                                                .Where(x => x.Symbol.Equals(symbol))
+                                                .ToListAsync();
+
+            if (shares.Count >= 0)
+            {
+                return Ok(shares);
+            }
+            else
+                return BadRequest();
+        }
+
+
+        [HttpGet("{symbol}/Latest")]
+        public async Task<IActionResult> GetLatestPrice([Required][FromRoute]string symbol)
+        {
+            var share = await _shareRepository.Query()
+                                            .Where(x => x.Symbol.Equals(symbol))
+                                            .FirstOrDefaultAsync();
+            return Ok(share?.Rate);
+        }
+
+        [HttpPost]
+        public async Task<IActionResult> Post([FromBody]HourlyShareRate value)
+        {
+            if (!ModelState.IsValid)
+            {
+                return BadRequest(ModelState);
+            }
+
+            await _shareRepository.InsertAsync(value);
+
+            return Created($"Share/{value.Id}", value);
+        }
+        
+    }
+}
diff --git a/XOProject/Controller/TradeController.cs b/XOProject/Controller/TradeController.cs
new file mode 100644
index 0000000..dd61b12
--- /dev/null
+++ b/XOProject/Controller/TradeController.cs
@@ -0,0 +1,60 @@
+﻿using System;
+using System.ComponentModel.DataAnnotations;
+using System.Linq;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.EntityFrameworkCore;
+
+namespace XOProject.Controller
+{
+    [Route("api/[controller]")]
+    public class TradeController : ControllerBase
+    {
+        private IShareRepository _shareRepository { get; set; }
+        private ITradeRepository _tradeRepository { get; set; }
+        private IPortfolioRepository _portfolioRepository { get; set; }
+
+        public TradeController(IShareRepository shareRepository, ITradeRepository tradeRepository, IPortfolioRepository portfolioRepository)
+        {
+            _shareRepository = shareRepository;
+            _tradeRepository = tradeRepository;
+            _portfolioRepository = portfolioRepository;
+        }
+        
+        [HttpGet("{portfolioId}")]
+        public async Task<IActionResult> GetAllTradings([FromRoute]int portfolioId)
+        {
+            var trade = await _tradeRepository.Query()
+                                                .Where(x => x.PortfolioId.Equals(portfolioId))
+                                                .ToListAsync();
+            return Ok(trade);
+        }
+        
+        /// <summary>
+        /// For a given symbol of share, get the statistics for that particular share calculating the maximum, minimum, average and Sum of all the trades that happened for that share. 
+        /// Group statistics individually for all BUY trades and SELL trades separately.
+        /// </summary>
+        /// <param name="symbol"></param>
+        /// <returns></returns>
+
+        [HttpGet("Analysis/{symbol}")]
+        public async Task<IActionResult> GetAnalysis([Required][FromRoute]string symbol)
+        { 
+            var trades = await _tradeRepository.Query()
+                                                .Where(x => x.Symbol.Equals(symbol))
+                                                .ToListAsync();
+            var list = (from tr in trades
+                          group tr by tr.Action into dayGrp
+                          select new TradeAnalysis()
+                          {
+                              Action = dayGrp.Key,
+                              Sum = dayGrp.Sum(x => x.Price),
+                              Average = Math.Round(dayGrp.Average(x => x.Price), 2),
+                              Minimum = dayGrp.Min(x => x.Price),
+                              Maximum = dayGrp.Max(x => x.Price)
+                          }).ToList();
+            
+            return Ok(list);
+        }
+    }
+}
diff --git a/XOProject/Exceptions/HttpStatusCodeException.cs b/XOProject/Exceptions/HttpStatusCodeException.cs
new file mode 100644
index 0000000..6b95e33
--- /dev/null
+++ b/XOProject/Exceptions/HttpStatusCodeException.cs
@@ -0,0 +1,31 @@
+using System;
+using Newtonsoft.Json.Linq;
+
+namespace XOProject
+{
+    public class HttpStatusCodeException : Exception
+    {
+        public HttpStatusCodeException(int statusCode)
+        {
+            StatusCode = statusCode;
+        }
+
+        public HttpStatusCodeException(int statusCode, string message) : base(message)
+        {
+            StatusCode = statusCode;
+        }
+
+        public HttpStatusCodeException(int statusCode, Exception inner) : this(statusCode, inner.ToString())
+        {
+        }
+
+        public HttpStatusCodeException(int statusCode, JObject errorObject) : this(statusCode, errorObject.ToString())
+        {
+            ContentType = @"application/json";
+        }
+
+        public int StatusCode { get; set; }
+
+        public string ContentType { get; set; } = @"text/plain";
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Exceptions/HttpStatusCodeExceptionMiddleware.cs b/XOProject/Exceptions/HttpStatusCodeExceptionMiddleware.cs
new file mode 100644
index 0000000..e24e11d
--- /dev/null
+++ b/XOProject/Exceptions/HttpStatusCodeExceptionMiddleware.cs
@@ -0,0 +1,43 @@
+using System;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Http;
+using Microsoft.Extensions.Logging;
+
+namespace XOProject
+{
+    public class HttpStatusCodeExceptionMiddleware
+    {
+        private readonly ILogger<HttpStatusCodeExceptionMiddleware> _logger;
+        private readonly RequestDelegate _next;
+
+        public HttpStatusCodeExceptionMiddleware(RequestDelegate next, ILoggerFactory loggerFactory)
+        {
+            _next = next ?? throw new ArgumentNullException(nameof(next));
+            _logger = loggerFactory?.CreateLogger<HttpStatusCodeExceptionMiddleware>() ??
+                      throw new ArgumentNullException(nameof(loggerFactory));
+        }
+
+        public async Task Invoke(HttpContext context)
+        {
+            try
+            {
+                await _next(context);
+            }
+            catch (HttpStatusCodeException ex)
+            {
+                if (context.Response.HasStarted)
+                {
+                    _logger.LogWarning(
+                        "The response has already started, the http status code middleware will not be executed.");
+                    throw;
+                }
+
+                context.Response.Clear();
+                context.Response.StatusCode = ex.StatusCode;
+                context.Response.ContentType = ex.ContentType;
+
+                await context.Response.WriteAsync(ex.Message);
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Exceptions/HttpStatusCodeExceptionMiddlewareExtensions.cs b/XOProject/Exceptions/HttpStatusCodeExceptionMiddlewareExtensions.cs
new file mode 100644
index 0000000..da08556
--- /dev/null
+++ b/XOProject/Exceptions/HttpStatusCodeExceptionMiddlewareExtensions.cs
@@ -0,0 +1,12 @@
+using Microsoft.AspNetCore.Builder;
+
+namespace XOProject
+{
+    public static class HttpStatusCodeExceptionMiddlewareExtensions
+    {
+        public static IApplicationBuilder UseHttpStatusCodeExceptionMiddleware(this IApplicationBuilder builder)
+        {
+            return builder.UseMiddleware<HttpStatusCodeExceptionMiddleware>();
+        }
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Migrations/20181002102716_InitialCreate.Designer.cs b/XOProject/Migrations/20181002102716_InitialCreate.Designer.cs
new file mode 100644
index 0000000..86da6e8
--- /dev/null
+++ b/XOProject/Migrations/20181002102716_InitialCreate.Designer.cs
@@ -0,0 +1,121 @@
+﻿// <auto-generated />
+using System;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using XOProject;
+
+namespace XOProject.Migrations
+{
+    [DbContext(typeof(ExchangeContext))]
+    [Migration("20181002102716_InitialCreate")]
+    partial class InitialCreate
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
+                .HasAnnotation("Relational:MaxIdentifierLength", 128)
+                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+            modelBuilder.Entity("XOProject.HourlyShareRate", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<decimal>("Rate");
+
+                    b.Property<string>("Symbol")
+                        .IsRequired();
+
+                    b.Property<DateTime>("TimeStamp");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Shares");
+
+                    b.HasData(
+                        new { Id = 1, Rate = 90m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 2, Rate = 95m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 3, Rate = 100m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 4, Rate = 89m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 5, Rate = 110m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 6, Rate = 96m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 7, Rate = 97m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 8, Rate = 99m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 9, Rate = 91m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 10, Rate = 96m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 11, Rate = 105m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 12, Rate = 87m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 13, Rate = 100m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 14, Rate = 98m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 15, Rate = 95m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 16, Rate = 92m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) }
+                    );
+                });
+
+            modelBuilder.Entity("XOProject.Portfolio", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<string>("Name")
+                        .IsRequired();
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Portfolios");
+
+                    b.HasData(
+                        new { Id = 1, Name = "John Doe" }
+                    );
+                });
+
+            modelBuilder.Entity("XOProject.Trade", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<string>("Action");
+
+                    b.Property<int>("NoOfShares");
+
+                    b.Property<int>("PortfolioId");
+
+                    b.Property<decimal>("Price");
+
+                    b.Property<string>("Symbol");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("PortfolioId");
+
+                    b.ToTable("Trades");
+
+                    b.HasData(
+                        new { Id = 1, Action = "BUY", NoOfShares = 50, PortfolioId = 1, Price = 5000.0m, Symbol = "REL" },
+                        new { Id = 2, Action = "BUY", NoOfShares = 100, PortfolioId = 1, Price = 10000.0m, Symbol = "REL" },
+                        new { Id = 3, Action = "BUY", NoOfShares = 150, PortfolioId = 1, Price = 14250.0m, Symbol = "CBI" },
+                        new { Id = 4, Action = "SELL", NoOfShares = 70, PortfolioId = 1, Price = 6790.0m, Symbol = "CBI" },
+                        new { Id = 5, Action = "SELL", NoOfShares = 50, PortfolioId = 1, Price = 6000.0m, Symbol = "REL" },
+                        new { Id = 6, Action = "SELL", NoOfShares = 100, PortfolioId = 1, Price = 11000.0m, Symbol = "REL" }
+                    );
+                });
+
+            modelBuilder.Entity("XOProject.Trade", b =>
+                {
+                    b.HasOne("XOProject.Portfolio")
+                        .WithMany("Trade")
+                        .HasForeignKey("PortfolioId")
+                        .OnDelete(DeleteBehavior.Cascade);
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/XOProject/Migrations/20181002102716_InitialCreate.cs b/XOProject/Migrations/20181002102716_InitialCreate.cs
new file mode 100644
index 0000000..0fee9b6
--- /dev/null
+++ b/XOProject/Migrations/20181002102716_InitialCreate.cs
@@ -0,0 +1,121 @@
+﻿using System;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace XOProject.Migrations
+{
+    public partial class InitialCreate : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "Portfolios",
+                columns: table => new
+                {
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Name = table.Column<string>(nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Portfolios", x => x.Id);
+                });
+
+            migrationBuilder.CreateTable(
+                name: "Shares",
+                columns: table => new
+                {
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    TimeStamp = table.Column<DateTime>(nullable: false),
+                    Symbol = table.Column<string>(nullable: false),
+                    Rate = table.Column<decimal>(nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Shares", x => x.Id);
+                });
+
+            migrationBuilder.CreateTable(
+                name: "Trades",
+                columns: table => new
+                {
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Symbol = table.Column<string>(nullable: true),
+                    NoOfShares = table.Column<int>(nullable: false),
+                    Price = table.Column<decimal>(nullable: false),
+                    PortfolioId = table.Column<int>(nullable: false),
+                    Action = table.Column<string>(nullable: true)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Trades", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_Trades_Portfolios_PortfolioId",
+                        column: x => x.PortfolioId,
+                        principalTable: "Portfolios",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
+
+            migrationBuilder.InsertData(
+                table: "Portfolios",
+                columns: new[] { "Id", "Name" },
+                values: new object[] { 1, "John Doe" });
+
+            migrationBuilder.InsertData(
+                table: "Shares",
+                columns: new[] { "Id", "Rate", "Symbol", "TimeStamp" },
+                values: new object[,]
+                {
+                    { 15, 95m, "CBI", new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 14, 98m, "CBI", new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 13, 100m, "CBI", new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 12, 87m, "CBI", new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 11, 105m, "CBI", new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 10, 96m, "CBI", new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 16, 92m, "CBI", new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 9, 91m, "CBI", new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 7, 97m, "REL", new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 6, 96m, "REL", new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 5, 110m, "REL", new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 4, 89m, "REL", new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 3, 100m, "REL", new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 2, 95m, "REL", new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 8, 99m, "REL", new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 1, 90m, "REL", new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) }
+                });
+
+            migrationBuilder.InsertData(
+                table: "Trades",
+                columns: new[] { "Id", "Action", "NoOfShares", "PortfolioId", "Price", "Symbol" },
+                values: new object[,]
+                {
+                    { 1, "BUY", 50, 1, 5000.0m, "REL" },
+                    { 2, "BUY", 100, 1, 10000.0m, "REL" },
+                    { 3, "BUY", 150, 1, 14250.0m, "CBI" },
+                    { 4, "SELL", 70, 1, 6790.0m, "CBI" },
+                    { 5, "SELL", 50, 1, 6000.0m, "REL" },
+                    { 6, "SELL", 100, 1, 11000.0m, "REL" }
+                });
+
+            migrationBuilder.CreateIndex(
+                name: "IX_Trades_PortfolioId",
+                table: "Trades",
+                column: "PortfolioId");
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "Shares");
+
+            migrationBuilder.DropTable(
+                name: "Trades");
+
+            migrationBuilder.DropTable(
+                name: "Portfolios");
+        }
+    }
+}
diff --git a/XOProject/Migrations/ExchangeContextModelSnapshot.cs b/XOProject/Migrations/ExchangeContextModelSnapshot.cs
new file mode 100644
index 0000000..7f91ef6
--- /dev/null
+++ b/XOProject/Migrations/ExchangeContextModelSnapshot.cs
@@ -0,0 +1,119 @@
+﻿// <auto-generated />
+using System;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using XOProject;
+
+namespace XOProject.Migrations
+{
+    [DbContext(typeof(ExchangeContext))]
+    partial class ExchangeContextModelSnapshot : ModelSnapshot
+    {
+        protected override void BuildModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
+                .HasAnnotation("Relational:MaxIdentifierLength", 128)
+                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+            modelBuilder.Entity("XOProject.HourlyShareRate", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<decimal>("Rate");
+
+                    b.Property<string>("Symbol")
+                        .IsRequired();
+
+                    b.Property<DateTime>("TimeStamp");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Shares");
+
+                    b.HasData(
+                        new { Id = 1, Rate = 90m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 2, Rate = 95m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 3, Rate = 100m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 4, Rate = 89m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 5, Rate = 110m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 6, Rate = 96m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 7, Rate = 97m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 8, Rate = 99m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 9, Rate = 91m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 10, Rate = 96m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 11, Rate = 105m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 12, Rate = 87m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 13, Rate = 100m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 14, Rate = 98m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 15, Rate = 95m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 16, Rate = 92m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) }
+                    );
+                });
+
+            modelBuilder.Entity("XOProject.Portfolio", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<string>("Name")
+                        .IsRequired();
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Portfolios");
+
+                    b.HasData(
+                        new { Id = 1, Name = "John Doe" }
+                    );
+                });
+
+            modelBuilder.Entity("XOProject.Trade", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<string>("Action");
+
+                    b.Property<int>("NoOfShares");
+
+                    b.Property<int>("PortfolioId");
+
+                    b.Property<decimal>("Price");
+
+                    b.Property<string>("Symbol");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("PortfolioId");
+
+                    b.ToTable("Trades");
+
+                    b.HasData(
+                        new { Id = 1, Action = "BUY", NoOfShares = 50, PortfolioId = 1, Price = 5000.0m, Symbol = "REL" },
+                        new { Id = 2, Action = "BUY", NoOfShares = 100, PortfolioId = 1, Price = 10000.0m, Symbol = "REL" },
+                        new { Id = 3, Action = "BUY", NoOfShares = 150, PortfolioId = 1, Price = 14250.0m, Symbol = "CBI" },
+                        new { Id = 4, Action = "SELL", NoOfShares = 70, PortfolioId = 1, Price = 6790.0m, Symbol = "CBI" },
+                        new { Id = 5, Action = "SELL", NoOfShares = 50, PortfolioId = 1, Price = 6000.0m, Symbol = "REL" },
+                        new { Id = 6, Action = "SELL", NoOfShares = 100, PortfolioId = 1, Price = 11000.0m, Symbol = "REL" }
+                    );
+                });
+
+            modelBuilder.Entity("XOProject.Trade", b =>
+                {
+                    b.HasOne("XOProject.Portfolio")
+                        .WithMany("Trade")
+                        .HasForeignKey("PortfolioId")
+                        .OnDelete(DeleteBehavior.Cascade);
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/XOProject/Model/HourlyShareRate.cs b/XOProject/Model/HourlyShareRate.cs
new file mode 100644
index 0000000..ebfc8df
--- /dev/null
+++ b/XOProject/Model/HourlyShareRate.cs
@@ -0,0 +1,19 @@
+﻿using System;
+using System.ComponentModel.DataAnnotations;
+
+namespace XOProject
+{
+    public class HourlyShareRate
+    {
+        public int Id { get; set; }
+
+        [Required]
+        public DateTime TimeStamp { get; set; }
+
+        [Required]
+        public string Symbol { get; set; }
+
+        [Required]
+        public decimal Rate { get; set; }
+    }
+}
diff --git a/XOProject/Model/Portfolio.cs b/XOProject/Model/Portfolio.cs
new file mode 100644
index 0000000..35094ed
--- /dev/null
+++ b/XOProject/Model/Portfolio.cs
@@ -0,0 +1,16 @@
+﻿using System.Collections.Generic;
+using System.ComponentModel.DataAnnotations;
+
+namespace XOProject
+{
+    public class Portfolio
+    {
+        public int Id { get; set; }
+
+        [Required]
+        public string Name { get; set; }
+        
+        public List<Trade> Trade { get; set; }
+
+    }
+}
diff --git a/XOProject/Model/Trade.cs b/XOProject/Model/Trade.cs
new file mode 100644
index 0000000..94571a9
--- /dev/null
+++ b/XOProject/Model/Trade.cs
@@ -0,0 +1,17 @@
+﻿namespace XOProject
+{
+    public class Trade
+    {
+        public int Id { get; set; }
+        
+        public string Symbol { get; set; }
+
+        public int NoOfShares { get; set; }
+
+        public decimal Price { get; set; }       
+
+        public int PortfolioId { get; set; }
+        
+        public string Action { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Model/TradeAnalysis.cs b/XOProject/Model/TradeAnalysis.cs
new file mode 100644
index 0000000..c3d2660
--- /dev/null
+++ b/XOProject/Model/TradeAnalysis.cs
@@ -0,0 +1,20 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+
+namespace XOProject
+{
+    public class TradeAnalysis
+    {
+        public decimal Sum { get; set; }
+
+        public decimal Average { get; set; }
+
+        public decimal Maximum { get; set; }
+
+        public decimal Minimum { get; set; }
+
+        public string Action { get; set; }
+    }
+}
diff --git a/XOProject/Model/TradeModel.cs b/XOProject/Model/TradeModel.cs
new file mode 100644
index 0000000..bf9d270
--- /dev/null
+++ b/XOProject/Model/TradeModel.cs
@@ -0,0 +1,22 @@
+﻿using System.ComponentModel.DataAnnotations;
+
+namespace XOProject
+{
+    public class TradeModel
+    {
+        private TradeModel() { }
+
+        [Required]
+        public string Symbol;
+
+        [Required]
+        public int NoOfShares { get; set; }
+
+        [Required]
+        public int PortfolioId { get; set; }
+
+        [Required]
+        [RegularExpression("BUY|SELL")]
+        public string Action { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Program.cs b/XOProject/Program.cs
new file mode 100644
index 0000000..927c3f5
--- /dev/null
+++ b/XOProject/Program.cs
@@ -0,0 +1,18 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+
+namespace XOProject
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                .UseStartup<Startup>()
+                .Build();
+    }
+}
diff --git a/XOProject/Repository/ExchangeContext.cs b/XOProject/Repository/ExchangeContext.cs
new file mode 100644
index 0000000..757d6c5
--- /dev/null
+++ b/XOProject/Repository/ExchangeContext.cs
@@ -0,0 +1,60 @@
+﻿using Microsoft.EntityFrameworkCore;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+
+namespace XOProject
+{
+    public class ExchangeContext : DbContext
+    {
+        public ExchangeContext()
+        {
+        }
+
+        public ExchangeContext(DbContextOptions<ExchangeContext> options) : base(options)
+        {
+        }
+
+
+        public DbSet<Portfolio> Portfolios { get; set; }
+
+        public DbSet<Trade> Trades { get; set; }
+
+        public DbSet<HourlyShareRate> Shares { get; set; }
+
+        protected override void OnModelCreating(ModelBuilder modelBuilder)
+        {
+            modelBuilder.Entity<Portfolio>().HasData(new Portfolio { Id = 1 , Name = "John Doe"});
+
+            modelBuilder.Entity<Trade>().HasData(
+            new  { Id = 1, NoOfShares = 50, Action = "BUY", Price = 5000.0M, Symbol = "REL" , PortfolioId = 1 },
+            new  { Id = 2, NoOfShares = 100, Action = "BUY", Price = 10000.0M, Symbol = "REL", PortfolioId = 1 },
+            new  { Id = 3, NoOfShares = 150, Action = "BUY", Price = 14250.0M, Symbol = "CBI", PortfolioId = 1 },
+            new  { Id = 4, NoOfShares = 70, Action = "SELL", Price = 6790.0M, Symbol = "CBI", PortfolioId = 1 },
+            new { Id = 5, NoOfShares = 50, Action = "SELL", Price = 6000.0M, Symbol = "REL", PortfolioId = 1 },
+            new { Id = 6, NoOfShares = 100, Action = "SELL", Price = 11000.0M, Symbol = "REL", PortfolioId = 1 });
+
+            modelBuilder.Entity<HourlyShareRate>().HasData(
+                new HourlyShareRate { Id = 1, Symbol = "REL", Rate = 90, TimeStamp = new DateTime(2018, 08, 13, 01, 00, 00) },
+                new HourlyShareRate { Id = 2, Symbol = "REL", Rate = 95, TimeStamp = new DateTime(2018, 08, 13, 02, 00, 00) },
+                new HourlyShareRate { Id = 3, Symbol = "REL", Rate = 100, TimeStamp = new DateTime(2018, 08, 13, 03, 00, 00) },
+                new HourlyShareRate { Id = 4, Symbol = "REL", Rate = 89, TimeStamp = new DateTime(2018, 08, 13, 04, 00, 00) },
+                new HourlyShareRate { Id = 5, Symbol = "REL", Rate = 110, TimeStamp = new DateTime(2018, 08, 13, 05, 00, 00) },
+                new HourlyShareRate { Id = 6, Symbol = "REL", Rate = 96, TimeStamp = new DateTime(2018, 08, 13, 06, 00, 00) },
+                new HourlyShareRate { Id = 7, Symbol = "REL", Rate = 97, TimeStamp = new DateTime(2018, 08, 13, 07, 00, 00) },
+                new HourlyShareRate { Id = 8, Symbol = "REL", Rate = 99, TimeStamp = new DateTime(2018, 08, 13, 08, 00, 00) },
+                new HourlyShareRate { Id = 9, Symbol = "CBI", Rate = 91, TimeStamp = new DateTime(2018, 08, 13, 01, 00, 00) },
+                new HourlyShareRate { Id = 10, Symbol = "CBI", Rate = 96, TimeStamp = new DateTime(2018, 08, 13, 02, 00, 00) },
+                new HourlyShareRate { Id = 11, Symbol = "CBI", Rate = 105, TimeStamp = new DateTime(2018, 08, 13, 03, 00, 00) },
+                new HourlyShareRate { Id = 12, Symbol = "CBI", Rate = 87, TimeStamp = new DateTime(2018, 08, 13, 04, 00, 00) },
+                new HourlyShareRate { Id = 13, Symbol = "CBI", Rate = 100, TimeStamp = new DateTime(2018, 08, 13, 05, 00, 00) },
+                new HourlyShareRate { Id = 14, Symbol = "CBI", Rate = 98, TimeStamp = new DateTime(2018, 08, 13, 06, 00, 00) },
+                new HourlyShareRate { Id = 15, Symbol = "CBI", Rate = 95, TimeStamp = new DateTime(2018, 08, 13, 07, 00, 00) },
+                new HourlyShareRate { Id = 16, Symbol = "CBI", Rate = 92, TimeStamp = new DateTime(2018, 08, 13, 08, 00, 00) });
+
+            base.OnModelCreating(modelBuilder);
+        }
+        
+    }
+}
diff --git a/XOProject/Repository/GenericRepository.cs b/XOProject/Repository/GenericRepository.cs
new file mode 100644
index 0000000..a419c11
--- /dev/null
+++ b/XOProject/Repository/GenericRepository.cs
@@ -0,0 +1,34 @@
+﻿using System.Linq;
+using System.Threading.Tasks;
+using Microsoft.EntityFrameworkCore;
+
+namespace XOProject
+{
+    public abstract class GenericRepository<T> : IGenericRepository<T>
+        where T : class, new()
+    {
+        protected ExchangeContext _dbContext { get; set; }
+
+        public async Task<T> GetAsync(string id)
+        {
+            return await _dbContext.FindAsync<T>(id);
+        }
+
+        public IQueryable<T> Query()
+        {
+            return _dbContext.Set<T>().AsQueryable();
+        }
+
+        public async Task InsertAsync(T entity)
+        {
+            _dbContext.Set<T>().Add(entity);
+            await _dbContext.SaveChangesAsync();
+        }
+
+        public async Task UpdateAsync(T entity)
+        {
+            _dbContext.Entry(entity).State = EntityState.Modified;
+            await _dbContext.SaveChangesAsync();
+        }
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Repository/IGenericRepository.cs b/XOProject/Repository/IGenericRepository.cs
new file mode 100644
index 0000000..a9464db
--- /dev/null
+++ b/XOProject/Repository/IGenericRepository.cs
@@ -0,0 +1,16 @@
+using System.Linq;
+using System.Threading.Tasks;
+
+namespace XOProject
+{
+    public interface IGenericRepository<T>
+    {
+        Task<T> GetAsync(string id);
+
+        IQueryable<T> Query();
+
+        Task InsertAsync(T entity);
+
+        Task UpdateAsync(T entity);
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Repository/IPortfolioRepository.cs b/XOProject/Repository/IPortfolioRepository.cs
new file mode 100644
index 0000000..c7e9381
--- /dev/null
+++ b/XOProject/Repository/IPortfolioRepository.cs
@@ -0,0 +1,9 @@
+﻿using System.Linq;
+
+namespace XOProject
+{
+    public interface IPortfolioRepository : IGenericRepository<Portfolio>
+    {
+        IQueryable<Portfolio> GetAll();
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Repository/IShareRepository.cs b/XOProject/Repository/IShareRepository.cs
new file mode 100644
index 0000000..8a4dae0
--- /dev/null
+++ b/XOProject/Repository/IShareRepository.cs
@@ -0,0 +1,6 @@
+﻿namespace XOProject
+{
+    public interface IShareRepository : IGenericRepository<HourlyShareRate>
+    {
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Repository/ITradeRepository.cs b/XOProject/Repository/ITradeRepository.cs
new file mode 100644
index 0000000..46318da
--- /dev/null
+++ b/XOProject/Repository/ITradeRepository.cs
@@ -0,0 +1,6 @@
+﻿namespace XOProject
+{
+    public interface ITradeRepository : IGenericRepository<Trade>
+    {
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Repository/PortfolioRepository.cs b/XOProject/Repository/PortfolioRepository.cs
new file mode 100644
index 0000000..fdb9dd4
--- /dev/null
+++ b/XOProject/Repository/PortfolioRepository.cs
@@ -0,0 +1,18 @@
+using System.Linq;
+using Microsoft.EntityFrameworkCore;
+
+namespace XOProject
+{
+    public class PortfolioRepository : GenericRepository<Portfolio>, IPortfolioRepository
+    {
+        public PortfolioRepository(ExchangeContext dbContext)
+        {
+            _dbContext = dbContext;
+        }
+
+        public IQueryable<Portfolio> GetAll()
+        {
+            return _dbContext.Portfolios.Include(x => x.Trade).AsQueryable();
+        }
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Repository/ShareRepository.cs b/XOProject/Repository/ShareRepository.cs
new file mode 100644
index 0000000..6d768a0
--- /dev/null
+++ b/XOProject/Repository/ShareRepository.cs
@@ -0,0 +1,10 @@
+namespace XOProject
+{
+    public class ShareRepository : GenericRepository<HourlyShareRate>, IShareRepository
+    {
+        public ShareRepository(ExchangeContext dbContext)
+        {
+            _dbContext = dbContext;
+        }
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Repository/TradeRepository.cs b/XOProject/Repository/TradeRepository.cs
new file mode 100644
index 0000000..c7b8865
--- /dev/null
+++ b/XOProject/Repository/TradeRepository.cs
@@ -0,0 +1,10 @@
+namespace XOProject
+{
+    public class TradeRepository : GenericRepository<Trade>, ITradeRepository
+    {
+        public TradeRepository(ExchangeContext dbContext)
+        {
+            _dbContext = dbContext;
+        }
+    }
+}
\ No newline at end of file
diff --git a/XOProject/Startup.cs b/XOProject/Startup.cs
new file mode 100644
index 0000000..6a50424
--- /dev/null
+++ b/XOProject/Startup.cs
@@ -0,0 +1,48 @@
+﻿using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+
+namespace XOProject
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            services.AddDbContext<ExchangeContext>(options =>
+              options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
+            services.AddTransient<IShareRepository, ShareRepository>();
+            services.AddTransient<IPortfolioRepository, PortfolioRepository>();
+            services.AddTransient<ITradeRepository, TradeRepository>();
+            services.AddMvc();
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
+        {
+            if (env.IsDevelopment())
+            {
+                app.UseDeveloperExceptionPage();
+                app.UseHttpStatusCodeExceptionMiddleware();
+            }
+            else
+            {
+                app.UseHttpStatusCodeExceptionMiddleware();
+                app.UseExceptionHandler();
+            }
+
+            app.UseStaticFiles();
+
+            app.UseMvc();
+        }
+    }
+}
diff --git a/XOProject/XO-Project.csproj b/XOProject/XO-Project.csproj
new file mode 100644
index 0000000..3f1f557
--- /dev/null
+++ b/XOProject/XO-Project.csproj
@@ -0,0 +1,17 @@
+<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.6" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.1.1" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="2.1.0" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="2.1.1" />
+    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="2.0.3" />
+  </ItemGroup>
+  <ItemGroup>
+    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.3" />
+	<DotNetCliToolReference Include="Microsoft.EntityFrameworkCore.Tools.DotNet" Version="2.0.1" />
+    <DotNetCliToolReference Include="Microsoft.DotNet.Watcher.Tools" Version="2.0.0" />
+  </ItemGroup>
+</Project>
diff --git a/XOProject/appsettings.Development.json b/XOProject/appsettings.Development.json
new file mode 100644
index 0000000..fa8ce71
--- /dev/null
+++ b/XOProject/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+  "Logging": {
+    "IncludeScopes": false,
+    "LogLevel": {
+      "Default": "Debug",
+      "System": "Information",
+      "Microsoft": "Information"
+    }
+  }
+}
diff --git a/XOProject/appsettings.json b/XOProject/appsettings.json
new file mode 100644
index 0000000..2167ceb
--- /dev/null
+++ b/XOProject/appsettings.json
@@ -0,0 +1,11 @@
+﻿{
+  "ConnectionStrings": {
+    "DefaultConnection": "Server=(local);Database=XOProjectDb;Trusted_Connection=True;"
+  },
+  "Logging": {
+    "IncludeScopes": false,
+    "LogLevel": {
+      "Default": "Warning"
+    }
+  }
+}
-- 
2.18.0.windows.1

